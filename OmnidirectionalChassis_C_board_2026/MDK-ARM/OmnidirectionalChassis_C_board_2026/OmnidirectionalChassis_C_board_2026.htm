<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [OmnidirectionalChassis_C_board_2026\OmnidirectionalChassis_C_board_2026.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image OmnidirectionalChassis_C_board_2026\OmnidirectionalChassis_C_board_2026.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Wed Oct  1 20:27:48 2025
<BR><P>
<H3>Maximum Stack Usage =        436 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(.text.CAN1_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from stm32f4xx_it.o(.text.CAN2_TX_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">Capacitor</a> from freertos.o(.text.Capacitor) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_capacitor)
 <LI><a href="#[71]">Chassis_Comm</a> from freertos.o(.text.Chassis_Comm) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_chassis_comm)
 <LI><a href="#[72]">Chassis_Ctrl</a> from freertos.o(.text.Chassis_Ctrl) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_chassis_ctrl)
 <LI><a href="#[73]">Chassis_Monitor</a> from freertos.o(.text.Chassis_Monitor) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_chassis_monitor)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">StartDefaultTask</a> from freertos.o(.text.StartDefaultTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_defaultTask)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(.text.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f4xx_it.o(.text.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[64]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[64]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[66]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[67]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[62]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[63]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f4xx_it.o(.text.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from stm32f4xx_it.o(.text.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7c]">_GLOBAL__sub_I_djimotor.cpp</a> from djimotor.o(.text._GLOBAL__sub_I_djimotor.cpp) referenced from djimotor.o(.init_array)
 <LI><a href="#[7b]">_GLOBAL__sub_I_target.cpp</a> from target.o(.text._GLOBAL__sub_I_target.cpp) referenced from target.o(.init_array)
 <LI><a href="#[7d]">_GLOBAL__sub_I_uart_driver.cpp</a> from uart_driver.o(.text._GLOBAL__sub_I_uart_driver.cpp) referenced from uart_driver.o(.init_array)
 <LI><a href="#[60]">RmMotorRxData(CanDriver::CanFrame const&)</a> from djimotor.o(.text._Z13RmMotorRxDataRKN9CanDriver8CanFrameE) referenced 4 times from djimotor.o(.text.CanInit)
 <LI><a href="#[65]">DR16_RxCallback(unsigned char const*, unsigned short)</a> from uart_driver.o(.text._Z15DR16_RxCallbackPKht) referenced 2 times from uart_driver.o(.text.RxEventCallback)
 <LI><a href="#[6d]">UartDriver::uartDriver::~uartDriver__sub_object()</a> from uart_driver.o(.text._ZN10UartDriver10uartDriverD2Ev) referenced 2 times from uart_driver.o(.text.__cxx_global_var_init)
 <LI><a href="#[6d]">UartDriver::uartDriver::~uartDriver__sub_object()</a> from uart_driver.o(.text._ZN10UartDriver10uartDriverD2Ev) referenced 2 times from uart_driver.o(.text.__cxx_global_var_init.1)
 <LI><a href="#[6c]">motor::DJImotor::~DJImotor__sub_object()</a> from djimotor.o(.text._ZN5motor8DJImotorD2Ev) referenced 2 times from djimotor.o(.text.__cxx_global_var_init)
 <LI><a href="#[6c]">motor::DJImotor::~DJImotor__sub_object()</a> from djimotor.o(.text._ZN5motor8DJImotorD2Ev) referenced 2 times from djimotor.o(.text.__cxx_global_var_init.1)
 <LI><a href="#[6c]">motor::DJImotor::~DJImotor__sub_object()</a> from djimotor.o(.text._ZN5motor8DJImotorD2Ev) referenced 2 times from djimotor.o(.text.__cxx_global_var_init.2)
 <LI><a href="#[6c]">motor::DJImotor::~DJImotor__sub_object()</a> from djimotor.o(.text._ZN5motor8DJImotorD2Ev) referenced 2 times from djimotor.o(.text.__cxx_global_var_init.3)
 <LI><a href="#[77]">CanDriver::STM32CANHal::Send(CanDriver::CanFrame const&)</a> from can_driver.o(.text._ZN9CanDriver11STM32CANHal4SendERKNS_8CanFrameE) referenced from can_driver.o(.rodata._ZTVN9CanDriver11STM32CANHalE)
 <LI><a href="#[76]">CanDriver::STM32CANHal::~STM32CANHal__deallocating()</a> from can_driver.o(.text._ZN9CanDriver11STM32CANHalD0Ev) referenced from can_driver.o(.rodata._ZTVN9CanDriver11STM32CANHalE)
 <LI><a href="#[75]">CanDriver::STM32CANHal::~STM32CANHal__sub_object()</a> from can_driver.o(.text._ZN9CanDriver11STM32CANHalD2Ev) referenced from can_driver.o(.rodata._ZTVN9CanDriver11STM32CANHalE)
 <LI><a href="#[79]">CanDriver::CanHal::~CanHal__deallocating()</a> from can_driver.o(.text._ZN9CanDriver6CanHalD0Ev) referenced from can_driver.o(.rodata._ZTVN9CanDriver6CanHalE)
 <LI><a href="#[78]">CanDriver::CanHal::~CanHal__sub_object()</a> from can_driver.o(.text._ZN9CanDriver6CanHalD2Ev) referenced from can_driver.o(.rodata._ZTVN9CanDriver6CanHalE)
 <LI><a href="#[68]">void std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short)</a> from uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE11__call_implB8nn190000INS0_20__default_alloc_funcIPS4_S4_EEEEvPKNS0_16__policy_storageES3_t) referenced 2 times from uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE8__createB8nn190000INS0_20__default_alloc_funcIPS4_S4_EEEES5_v)
 <LI><a href="#[69]">std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short)</a> from uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE12__call_emptyB8nn190000EPKNS0_16__policy_storageES3_t) referenced 2 times from uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEEC2B8nn190000Ev)
 <LI><a href="#[6a]">void std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&)</a> from djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE11__call_implB8nn190000INS0_20__default_alloc_funcIPS6_S6_EEEEvPKNS0_16__policy_storageES5_) referenced 2 times from djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE8__createB8nn190000INS0_20__default_alloc_funcIPS6_S6_EEEES7_v)
 <LI><a href="#[6b]">std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&)</a> from djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE12__call_emptyB8nn190000EPKNS0_16__policy_storageES5_) referenced 2 times from djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEEC2B8nn190000Ev)
 <LI><a href="#[7a]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from can_driver.o(.rodata._ZTVN9CanDriver6CanHalE)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[5e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5d]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[6f]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[6e]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[81]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[23a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23b]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[82]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[23c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[23d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[df]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[85]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[87]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[89]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[23e]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[8d]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[90]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[93]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[95]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[98]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[99]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[9b]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[23f]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[9d]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[a1]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a3]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[240]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[a7]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[241]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[242]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[243]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[244]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[245]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[246]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[247]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[248]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[249]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[250]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[251]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[252]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[253]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[254]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[255]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[256]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[257]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[258]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[259]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[25a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[25b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[25c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[80]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[25d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[25e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b9]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bc]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[260]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[be]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[261]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[262]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[c2]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_impl(unsigned int)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[c5]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[c6]"></a>posix_memalign</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, h1_memalign.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_aligned_impl(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[c7]"></a>vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>

<P><STRONG><a name="[c9]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[bf]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[c3]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[cb]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[268]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[cd]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a8]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[cf]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[26c]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d2]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d3]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[84]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[c8]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>

<P><STRONG><a name="[d8]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[96]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[db]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[92]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[9a]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[dc]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9c]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[86]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[dd]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[af]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[b4]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[b2]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[ca]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[26d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[cc]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[272]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d5]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ee]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f1]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[d6]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f2]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9e]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a0]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[f3]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[a2]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[a4]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[d7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[e3]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[e1]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f6]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[e4]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[273]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[d9]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[bb]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[e5]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[e2]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ce]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[f4]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[f8]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[108]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[274]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[107]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[275]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fa]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[aa]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[f0]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ea]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[100]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[231]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[276]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[277]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[105]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[f7]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[101]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[fc]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[fd]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[fe]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[109]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[106]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[278]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[232]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[279]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN2_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>CanInit</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, djimotor.o(.text.CanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CanInit &rArr; CanDriver::CreateCANHal(unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::~unique_ptr__sub_object[abi:nn190000]()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJIMotorController::DJIMotorController__sub_object(CanDriver::CanHal&)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator*[abi:nn190000]() const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::SetRxCallback(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object&lang;void (*)(CanDriver::CanFrame const&), void&rang;(void (*)(CanDriver::CanFrame const&))
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator-&rang;[abi:nn190000]() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator bool[abi:nn190000]() const
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>Capacitor</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, freertos.o(.text.Capacitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Capacitor &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_capacitor)
</UL>
<P><STRONG><a name="[71]"></a>Chassis_Comm</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, freertos.o(.text.Chassis_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Chassis_Comm &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_chassis_comm)
</UL>
<P><STRONG><a name="[72]"></a>Chassis_Ctrl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, freertos.o(.text.Chassis_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Chassis_Ctrl &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_chassis_ctrl)
</UL>
<P><STRONG><a name="[73]"></a>Chassis_Monitor</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, freertos.o(.text.Chassis_Monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Chassis_Monitor &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_chassis_monitor)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::ConfigureFilter()
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::ConfigureFilter()
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::Send(CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::ConfigureFilter()
</UL>

<P><STRONG><a name="[126]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::IrqRxFifo0()
</UL>

<P><STRONG><a name="[10b]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 1010 bytes, Stack size 48 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_CAN_Init</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 428 bytes, Stack size 88 bytes, can.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo0FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, can_driver.o(.text.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RxFifo0Callback()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RxFifo0Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1FullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_RxFifo1MsgPendingCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_SleepCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_SleepCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_CAN_Start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::ConfigureFilter()
</UL>

<P><STRONG><a name="[11b]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox0CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox1CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_TxMailbox2CompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_WakeUpFromRxMsgCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_DMA_Abort</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 798 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_DMA_Init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[134]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 950 bytes, Stack size 56 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[129]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::monitoring::getTime()
</UL>

<P><STRONG><a name="[15b]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[136]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>HAL_InitTick</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, stm32f4xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13a]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[146]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[145]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[13b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[144]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[148]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1726 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 246 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[14c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[15a]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::UartInit()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::myRxCallback(unsigned short)
</UL>

<P><STRONG><a name="[15e]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, uart_driver.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::myRxCallback(unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver_Find(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[161]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, uart_driver.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_ErrorCallback &rArr; HAL_UART_GetError
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[162]"></a>HAL_UART_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_GetError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[163]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1116 bytes, Stack size 80 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_UART_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[16a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 872 bytes, Stack size 120 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[182]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[16d]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::UartInit()
</UL>

<P><STRONG><a name="[183]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[184]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>MX_CAN1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can.o(.text.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>MX_CAN2_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can.o(.text.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>MX_DMA_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 320 bytes, Stack size 160 bytes, freertos.o(.text.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>MX_GPIO_Init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>MX_TIM4_Init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usart.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart.o(.text.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>RxEventCallback</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uart_driver.o(.text.RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RxEventCallback &rArr; UartDriver::uartDriver::UartInit() &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::UartInit()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::setRxCallback(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object&lang;void (*)(unsigned char const*, unsigned short), void&rang;(void (*)(unsigned char const*, unsigned short))
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>StartDefaultTask</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, freertos.o(.text.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = StartDefaultTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_defaultTask)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>SystemClock_Config</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14a]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 420 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[156]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[15d]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RmMotorRxData(CanDriver::CanFrame const&)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, djimotor.o(.text._Z13RmMotorRxDataRKN9CanDriver8CanFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RmMotorRxData(CanDriver::CanFrame const&) &rArr; motor::DJImotor::DataUpdate(unsigned char const*, float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::monitoring::getTime()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DataUpdate(unsigned char const*, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> djimotor.o(.text.CanInit)
</UL>
<P><STRONG><a name="[65]"></a>DR16_RxCallback(unsigned char const*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart_driver.o(.text._Z15DR16_RxCallbackPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DR16_RxCallback(unsigned char const*, unsigned short) &rArr; Clicker::DR16::DR16DataUpdata(unsigned char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clicker::DR16::DR16DataUpdata(unsigned char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_driver.o(.text.RxEventCallback)
</UL>
<P><STRONG><a name="[19a]"></a>UartDriver_Register(UartDriver::uartDriver*, __UART_HandleTypeDef*)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, uart_driver.o(.text._Z19UartDriver_RegisterPN10UartDriver10uartDriverEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartDriver_Register(UartDriver::uartDriver*, __UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode)
</UL>

<P><STRONG><a name="[12d]"></a>CAN1_RxFifo0Callback()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, can_driver.o(.text._Z20CAN1_RxFifo0Callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAN1_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::IrqRxFifo0()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[12e]"></a>CAN2_RxFifo0Callback()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, can_driver.o(.text._Z20CAN2_RxFifo0Callbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAN2_RxFifo0Callback() &rArr; CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::IrqRxFifo0()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[160]"></a>UartDriver::uartDriver::myRxCallback(unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, uart_driver.o(.text._ZN10UartDriver10uartDriver12myRxCallbackEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator()(unsigned char const*, unsigned short) const
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[17b]"></a>UartDriver::uartDriver::setRxCallback(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_driver.o(.text._ZN10UartDriver10uartDriver13setRxCallbackENSt3__28functionIFvPKhtEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UartDriver::uartDriver::setRxCallback(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;) &rArr; std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&) &rArr; std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::swap(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEventCallback
</UL>

<P><STRONG><a name="[17d]"></a>UartDriver::uartDriver::UartInit()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uart_driver.o(.text._ZN10UartDriver10uartDriver8UartInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UartDriver::uartDriver::UartInit() &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEventCallback
</UL>

<P><STRONG><a name="[197]"></a>UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode)</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, uart_driver.o(.text._ZN10UartDriver10uartDriverC2EP20__UART_HandleTypeDefttNS0_8UartModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver_Register(UartDriver::uartDriver*, __UART_HandleTypeDef*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[6d]"></a>UartDriver::uartDriver::~uartDriver__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, uart_driver.o(.text._ZN10UartDriver10uartDriverD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UartDriver::uartDriver::~uartDriver__sub_object() &rArr; std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object() &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> uart_driver.o(.text.__cxx_global_var_init)
<LI> uart_driver.o(.text.__cxx_global_var_init.1)
</UL>
<P><STRONG><a name="[18d]"></a>State::monitoring::getTime()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, djimotor.o(.text._ZN5State10monitoring7getTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = State::monitoring::getTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmMotorRxData(CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[1a0]"></a>motor::AngleCalculator::AngleCalculator__sub_object(float)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, djimotor.o(.text._ZN5motor15AngleCalculatorC2Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor::AngleCalculator::AngleCalculator__sub_object(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DJImotor__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[115]"></a>motor::DJIMotorController::DJIMotorController__sub_object(CanDriver::CanHal&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, djimotor.o(.text._ZN5motor18DJIMotorControllerC2ERN9CanDriver6CanHalE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor::DJIMotorController::DJIMotorController__sub_object(CanDriver::CanHal&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[18c]"></a>motor::DJImotor::DataUpdate(unsigned char const*, float)</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, djimotor.o(.text._ZN5motor8DJImotor10DataUpdateEPKhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = motor::DJImotor::DataUpdate(unsigned char const*, float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmMotorRxData(CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[19f]"></a>motor::DJImotor::DJImotor__sub_object(unsigned int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, djimotor.o(.text._ZN5motor8DJImotorC2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = motor::DJImotor::DJImotor__sub_object(unsigned int) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::AngleCalculator::AngleCalculator__sub_object(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[6c]"></a>motor::DJImotor::~DJImotor__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, djimotor.o(.text._ZN5motor8DJImotorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = motor::DJImotor::~DJImotor__sub_object() &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::~vector__sub_object[abi:nn190000]() &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]() &rArr; std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int) &rArr; std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int) &rArr; void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::~vector__sub_object[abi:nn190000]()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> djimotor.o(.text.__cxx_global_var_init)
<LI> djimotor.o(.text.__cxx_global_var_init.1)
<LI> djimotor.o(.text.__cxx_global_var_init.2)
<LI> djimotor.o(.text.__cxx_global_var_init.3)
</UL>
<P><STRONG><a name="[18e]"></a>Clicker::DR16::DR16DataUpdata(unsigned char const*)</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, dr16.o(.text._ZN7Clicker4DR1614DR16DataUpdataEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Clicker::DR16::DR16DataUpdata(unsigned char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_RxCallback(unsigned char const*, unsigned short)
</UL>

<P><STRONG><a name="[77]"></a>CanDriver::STM32CANHal::Send(CanDriver::CanFrame const&)</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, can_driver.o(.text._ZN9CanDriver11STM32CANHal4SendERKNS_8CanFrameE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanDriver::STM32CANHal::Send(CanDriver::CanFrame const&) &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_driver.o(.rodata._ZTVN9CanDriver11STM32CANHalE)
</UL>
<P><STRONG><a name="[1a4]"></a>CanDriver::STM32CANHal::STM32CANHal__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, can_driver.o(.text._ZN9CanDriver11STM32CANHalC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CanDriver::STM32CANHal::STM32CANHal__sub_object() &rArr; CanDriver::CanHal::CanHal__sub_object() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::CanHal__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[76]"></a>CanDriver::STM32CANHal::~STM32CANHal__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can_driver.o(.text._ZN9CanDriver11STM32CANHalD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CanDriver::STM32CANHal::~STM32CANHal__deallocating() &rArr; CanDriver::STM32CANHal::~STM32CANHal__sub_object() &rArr; CanDriver::CanHal::~CanHal__sub_object() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::~STM32CANHal__sub_object()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_driver.o(.rodata._ZTVN9CanDriver11STM32CANHalE)
</UL>
<P><STRONG><a name="[75]"></a>CanDriver::STM32CANHal::~STM32CANHal__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, can_driver.o(.text._ZN9CanDriver11STM32CANHalD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CanDriver::STM32CANHal::~STM32CANHal__sub_object() &rArr; CanDriver::CanHal::~CanHal__sub_object() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::~CanHal__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::~STM32CANHal__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_driver.o(.rodata._ZTVN9CanDriver11STM32CANHalE)
</UL>
<P><STRONG><a name="[10d]"></a>CanDriver::CreateCANHal(unsigned int)</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, can_driver.o(.text._ZN9CanDriver12CreateCANHalEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CanDriver::CreateCANHal(unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(std::nullptr_t)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::ConfigureFilter()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::get[abi:nn190000]() const
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(CanDriver::CanHal*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::STM32CANHal__sub_object()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::~unique_ptr__sub_object[abi:nn190000]()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator-&rang;[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[18f]"></a>CanDriver::CanHal::IrqRxFifo0()</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, can_driver.o(.text._ZN9CanDriver6CanHal10IrqRxFifo0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CanDriver::CanHal::IrqRxFifo0() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanFrame::CanFrame__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RxFifo0Callback()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RxFifo0Callback()
</UL>

<P><STRONG><a name="[111]"></a>CanDriver::CanHal::SetRxCallback(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZN9CanDriver6CanHal13SetRxCallbackENSt3__28functionIFvRKNS_8CanFrameEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CanDriver::CanHal::SetRxCallback(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;) &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&) &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::swap(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[1aa]"></a>CanDriver::CanHal::ConfigureFilter()</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, can_driver.o(.text._ZN9CanDriver6CanHal15ConfigureFilterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanDriver::CanHal::ConfigureFilter() &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[1a5]"></a>CanDriver::CanHal::CanHal__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, can_driver.o(.text._ZN9CanDriver6CanHalC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CanDriver::CanHal::CanHal__sub_object() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::STM32CANHal__sub_object()
</UL>

<P><STRONG><a name="[79]"></a>CanDriver::CanHal::~CanHal__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, can_driver.o(.text._ZN9CanDriver6CanHalD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CanDriver::CanHal::~CanHal__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_driver.o(.rodata._ZTVN9CanDriver6CanHalE)
</UL>
<P><STRONG><a name="[78]"></a>CanDriver::CanHal::~CanHal__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, can_driver.o(.text._ZN9CanDriver6CanHalD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CanDriver::CanHal::~CanHal__sub_object() &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::~STM32CANHal__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_driver.o(.rodata._ZTVN9CanDriver6CanHalE)
</UL>
<P><STRONG><a name="[1ac]"></a>CanDriver::CanFrame::CanFrame__sub_object()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, djimotor.o(.text._ZN9CanDriver8CanFrameC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanDriver::CanFrame::CanFrame__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::IrqRxFifo0()
</UL>

<P><STRONG><a name="[190]"></a>UartDriver::uartDriver::getHandle() const</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, uart_driver.o(.text._ZNK10UartDriver10uartDriver9getHandleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UartDriver::uartDriver::getHandle() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver_Find(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[1ba]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNKSt3__210__function13__policy_funcIFvPKhtEEclB8nn190000EOS3_Ot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator()(unsigned char const*, unsigned short) const
</UL>

<P><STRONG><a name="[1bb]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, uart_driver.o(.text._ZNKSt3__210__function13__policy_funcIFvPKhtEEcvbB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const
</UL>

<P><STRONG><a name="[1bc]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, can_driver.o(.text._ZNKSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEEclB8nn190000ES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const
</UL>

<P><STRONG><a name="[1bd]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, can_driver.o(.text._ZNKSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEEcvbB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const
</UL>

<P><STRONG><a name="[1a9]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::get[abi:nn190000]() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, can_driver.o(.text._ZNKSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEE3getB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::get[abi:nn190000]() const &rArr; std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[10e]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator bool[abi:nn190000]() const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEEcvbB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator bool[abi:nn190000]() const &rArr; std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[114]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator*[abi:nn190000]() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEEdeB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator*[abi:nn190000]() const &rArr; std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[10f]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator-&rang;[abi:nn190000]() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEEptB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator-&rang;[abi:nn190000]() const &rArr; std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[1df]"></a>std::__2::default_delete&lang;CanDriver::CanHal&rang;::operator()[abi:nn190000](CanDriver::CanHal*) const</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, djimotor.o(.text._ZNKSt3__214default_deleteIN9CanDriver6CanHalEEclB8nn190000EPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::default_delete&lang;CanDriver::CanHal&rang;::operator()[abi:nn190000](CanDriver::CanHal*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*)
</UL>

<P><STRONG><a name="[1b5]"></a>std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::first[abi:nn190000]() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__217__compressed_pairIPN5motor15AngleCalculatorENS_9allocatorIS2_EEE5firstB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__end_cap[abi:nn190000]() const
</UL>

<P><STRONG><a name="[1b4]"></a>std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__217__compressed_pairIPN9CanDriver6CanHalENS_14default_deleteIS2_EEE5firstB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::get[abi:nn190000]() const
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator*[abi:nn190000]() const
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator-&rang;[abi:nn190000]() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::operator bool[abi:nn190000]() const
</UL>

<P><STRONG><a name="[1b6]"></a>std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__get[abi:nn190000]() const</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNKSt3__222__compressed_pair_elemIPN5motor15AngleCalculatorELi0ELb0EE5__getB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::first[abi:nn190000]() const
</UL>

<P><STRONG><a name="[1b7]"></a>std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNKSt3__222__compressed_pair_elemIPN9CanDriver6CanHalELi0ELb0EE5__getB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() const
</UL>

<P><STRONG><a name="[1f9]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__annotate_delete[abi:nn190000]() const</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, djimotor.o(.text._ZNKSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE17__annotate_deleteB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__annotate_delete[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()
</UL>

<P><STRONG><a name="[1b8]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::capacity[abi:nn190000]() const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE8capacityB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::capacity[abi:nn190000]() const &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__end_cap[abi:nn190000]() const &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__end_cap[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()
</UL>

<P><STRONG><a name="[1b9]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__end_cap[abi:nn190000]() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, djimotor.o(.text._ZNKSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE9__end_capB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__end_cap[abi:nn190000]() const &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::first[abi:nn190000]() const &rArr; std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__get[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::first[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::capacity[abi:nn190000]() const
</UL>

<P><STRONG><a name="[195]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator()(unsigned char const*, unsigned short) const</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNKSt3__28functionIFvPKhtEEclES2_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator()(unsigned char const*, unsigned short) const &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::myRxCallback(unsigned short)
</UL>

<P><STRONG><a name="[194]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNKSt3__28functionIFvPKhtEEcvbB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::myRxCallback(unsigned short)
</UL>

<P><STRONG><a name="[1af]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, can_driver.o(.text._ZNKSt3__28functionIFvRKN9CanDriver8CanFrameEEEclES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator()(CanDriver::CanFrame const&) const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::IrqRxFifo0()
</UL>

<P><STRONG><a name="[1ae]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, can_driver.o(.text._ZNKSt3__28functionIFvRKN9CanDriver8CanFrameEEEcvbB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::operator bool[abi:nn190000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::IrqRxFifo0()
</UL>

<P><STRONG><a name="[1c6]"></a>bool std::__2::__function::__not_null[abi:nn190000]&lang;void (unsigned char const*, unsigned short)&rang;(void (*)(unsigned char const*, unsigned short))</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, uart_driver.o(.text._ZNSt3__210__function10__not_nullB8nn190000IFvPKhtEEEbPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bool std::__2::__function::__not_null[abi:nn190000]&lang;void (unsigned char const*, unsigned short)&rang;(void (*)(unsigned char const*, unsigned short))
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
</UL>

<P><STRONG><a name="[1cf]"></a>bool std::__2::__function::__not_null[abi:nn190000]&lang;void (CanDriver::CanFrame const&)&rang;(void (*)(CanDriver::CanFrame const&))</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__210__function10__not_nullB8nn190000IFvRKN9CanDriver8CanFrameEEEEbPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bool std::__2::__function::__not_null[abi:nn190000]&lang;void (CanDriver::CanFrame const&)&rang;(void (*)(CanDriver::CanFrame const&))
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[1be]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__210__function13__policy_funcIFvPKhtEE4swapB8nn190000ERS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&, std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy const*&rang;::value && is_move_assignable&lang;std::__2::__function::__policy const*&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy const*&rang;(std::__2::__function::__policy const*&, std::__2::__function::__policy const*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::swap(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;&)
</UL>

<P><STRONG><a name="[200]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang; const&)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__210__function13__policy_funcIFvPKhtEEC2B8nn190000ERKS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>

<P><STRONG><a name="[1c2]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__210__function13__policy_funcIFvPKhtEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000]()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy::__create_empty[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1c5]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, uart_driver.o(.text._ZNSt3__210__function13__policy_funcIFvPKhtEEC2B8nn190000IPS4_TnNS_9enable_ifIXntsr7is_sameIu7__decayIT_ES5_EE5valueEiE4typeELi0EEEOS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short)) &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;() &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short))
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::__default_alloc_func__sub_object[abi:nn190000](void (*&&)(unsigned char const*, unsigned short))
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool std::__2::__function::__not_null[abi:nn190000]&lang;void (unsigned char const*, unsigned short)&rang;(void (*)(unsigned char const*, unsigned short))
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000]()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy::__create_empty[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object&lang;void (*)(unsigned char const*, unsigned short), void&rang;(void (*)(unsigned char const*, unsigned short))
</UL>

<P><STRONG><a name="[201]"></a>std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::~__policy_func__sub_object[abi:nn190000]()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__210__function13__policy_funcIFvPKhtEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object()
</UL>

<P><STRONG><a name="[1ca]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEE4swapB8nn190000ERS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy const*&rang;::value && is_move_assignable&lang;std::__2::__function::__policy const*&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy const*&rang;(std::__2::__function::__policy const*&, std::__2::__function::__policy const*&)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&, std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::swap(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>

<P><STRONG><a name="[204]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang; const&)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEEC2B8nn190000ERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>

<P><STRONG><a name="[1cc]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, can_driver.o(.text._ZNSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy::__create_empty[abi:nn190000]()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1ce]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, djimotor.o(.text._ZNSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEEC2B8nn190000IPS6_TnNS_9enable_ifIXntsr7is_sameIu7__decayIT_ES7_EE5valueEiE4typeELi0EEEOSB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&)) &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&))
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::__default_alloc_func__sub_object[abi:nn190000](void (*&&)(CanDriver::CanFrame const&))
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool std::__2::__function::__not_null[abi:nn190000]&lang;void (CanDriver::CanFrame const&)&rang;(void (*)(CanDriver::CanFrame const&))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy::__create_empty[abi:nn190000]()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object&lang;void (*)(CanDriver::CanFrame const&), void&rang;(void (*)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[205]"></a>std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__210__function13__policy_funcIFvRKN9CanDriver8CanFrameEEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object()
</UL>

<P><STRONG><a name="[68]"></a>void std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE11__call_implB8nn190000INS0_20__default_alloc_funcIPS4_S4_EEEEvPKNS0_16__policy_storageES3_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = void std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short) &rArr; std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&) &rArr; void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&) &rArr; decltype(std::declval&lang;void (*&)(unsigned char const*, unsigned short)&rang;()(std::declval&lang;unsigned char const*&rang;(), std::declval&lang;unsigned short&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE8__createB8nn190000INS0_20__default_alloc_funcIPS4_S4_EEEES5_v)
</UL>
<P><STRONG><a name="[69]"></a>std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE12__call_emptyB8nn190000EPKNS0_16__policy_storageES3_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short) &rArr; std::__2::__throw_bad_function_call[abi:nn190000]() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_bad_function_call[abi:nn190000]()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEEC2B8nn190000Ev)
</UL>
<P><STRONG><a name="[1c7]"></a>std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEE8__createB8nn190000INS0_20__default_alloc_funcIPS4_S4_EEEES5_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;() &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short))
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short))
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
</UL>

<P><STRONG><a name="[1d5]"></a>std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short))</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEEC2B8nn190000EPFvPKNS0_16__policy_storageES3_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short))
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;()
</UL>

<P><STRONG><a name="[1c3]"></a>std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000]()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, uart_driver.o(.text._ZNSt3__210__function16__policy_invokerIFvPKhtEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
</UL>

<P><STRONG><a name="[6a]"></a>void std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE11__call_implB8nn190000INS0_20__default_alloc_funcIPS6_S6_EEEEvPKNS0_16__policy_storageES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&) &rArr; std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) &rArr; void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&) &rArr; decltype(std::declval&lang;void (*&)(CanDriver::CanFrame const&)&rang;()(std::declval&lang;CanDriver::CanFrame const&&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE8__createB8nn190000INS0_20__default_alloc_funcIPS6_S6_EEEES7_v)
</UL>
<P><STRONG><a name="[6b]"></a>std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE12__call_emptyB8nn190000EPKNS0_16__policy_storageES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&) &rArr; std::__2::__throw_bad_function_call[abi:nn190000]() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_bad_function_call[abi:nn190000]()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEEC2B8nn190000Ev)
</UL>
<P><STRONG><a name="[1d0]"></a>std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEE8__createB8nn190000INS0_20__default_alloc_funcIPS6_S6_EEEES7_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&))
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&))
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[1d7]"></a>std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&))</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEEC2B8nn190000EPFvPKNS0_16__policy_storageES5_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&))
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;()
</UL>

<P><STRONG><a name="[1cd]"></a>std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__210__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[1c9]"></a>std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::__default_alloc_func__sub_object[abi:nn190000](void (*&&)(unsigned char const*, unsigned short))</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_driver.o(.text._ZNSt3__210__function20__default_alloc_funcIPFvPKhtES4_EC2B8nn190000EOS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::__default_alloc_func__sub_object[abi:nn190000](void (*&&)(unsigned char const*, unsigned short))
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
</UL>

<P><STRONG><a name="[1d3]"></a>std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__210__function20__default_alloc_funcIPFvPKhtES4_EclB8nn190000EOS3_Ot))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&) &rArr; void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&) &rArr; decltype(std::declval&lang;void (*&)(unsigned char const*, unsigned short)&rang;()(std::declval&lang;unsigned char const*&rang;(), std::declval&lang;unsigned short&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short)
</UL>

<P><STRONG><a name="[1d2]"></a>std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::__default_alloc_func__sub_object[abi:nn190000](void (*&&)(CanDriver::CanFrame const&))</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, djimotor.o(.text._ZNSt3__210__function20__default_alloc_funcIPFvRKN9CanDriver8CanFrameEES6_EC2B8nn190000EOS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::__default_alloc_func__sub_object[abi:nn190000](void (*&&)(CanDriver::CanFrame const&))
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[1d6]"></a>std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__210__function20__default_alloc_funcIPFvRKN9CanDriver8CanFrameEES6_EclB8nn190000ES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&) &rArr; void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&) &rArr; decltype(std::declval&lang;void (*&)(CanDriver::CanFrame const&)&rang;()(std::declval&lang;CanDriver::CanFrame const&&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_impl[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[1c4]"></a>std::__2::__function::__policy::__create_empty[abi:nn190000]()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, djimotor.o(.text._ZNSt3__210__function8__policy14__create_emptyB8nn190000Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]()
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[1da]"></a>std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, uart_driver.o(.text._ZNSt3__210__function8__policy15__choose_policyB8nn190000INS0_20__default_alloc_funcIPFvPKhtES6_EEEEPKS1_NS_17integral_constantIbLb1EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;()
</UL>

<P><STRONG><a name="[1db]"></a>std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__210__function8__policy15__choose_policyB8nn190000INS0_20__default_alloc_funcIPFvRKN9CanDriver8CanFrameEES8_EEEEPKS1_NS_17integral_constantIbLb1EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;()
</UL>

<P><STRONG><a name="[1c8]"></a>std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;()</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__210__function8__policy8__createB8nn190000INS0_20__default_alloc_funcIPFvPKhtES6_EEEEPKS1_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;() &rArr; std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
</UL>

<P><STRONG><a name="[1d1]"></a>std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;()</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__210__function8__policy8__createB8nn190000INS0_20__default_alloc_funcIPFvRKN9CanDriver8CanFrameEES8_EEEEPKS1_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__function::__policy const* std::__2::__function::__policy::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;() &rArr; std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy const* std::__2::__function::__policy::__choose_policy[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::integral_constant&lang;bool, true&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>

<P><STRONG><a name="[1dc]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, djimotor.o(.text._ZNSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEE5resetB8nn190000EPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*) &rArr; std::__2::default_delete&lang;CanDriver::CanHal&rang;::operator()[abi:nn190000](CanDriver::CanHal*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::default_delete&lang;CanDriver::CanHal&rang;::operator()[abi:nn190000](CanDriver::CanHal*) const
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::second[abi:nn190000]()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::~unique_ptr__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1ab]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(std::nullptr_t)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, can_driver.o(.text._ZNSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEEC2B8nn190000ILb1EvEEDn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(std::nullptr_t) &rArr; std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::__2::__value_init_tag, std::__2::__value_init_tag&rang;(std::__2::__value_init_tag&&, std::__2::__value_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::__2::__value_init_tag, std::__2::__value_init_tag&rang;(std::__2::__value_init_tag&&, std::__2::__value_init_tag&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[1a8]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(CanDriver::CanHal*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, can_driver.o(.text._ZNSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEEC2B8nn190000ILb1EvEEPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(CanDriver::CanHal*) &rArr; std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, std::__2::__value_init_tag&rang;(CanDriver::CanHal*&, std::__2::__value_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, void&rang;(CanDriver::CanHal*&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, std::__2::__value_init_tag&rang;(CanDriver::CanHal*&, std::__2::__value_init_tag&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[117]"></a>std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::~unique_ptr__sub_object[abi:nn190000]()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__210unique_ptrIN9CanDriver6CanHalENS_14default_deleteIS2_EEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::~unique_ptr__sub_object[abi:nn190000]() &rArr; std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*) &rArr; std::__2::default_delete&lang;CanDriver::CanHal&rang;::operator()[abi:nn190000](CanDriver::CanHal*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[1fc]"></a>motor::AngleCalculator* std::__2::__to_address[abi:nn190000]&lang;motor::AngleCalculator&rang;(motor::AngleCalculator*)</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__212__to_addressB8nn190000IN5motor15AngleCalculatorEEEPT_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = motor::AngleCalculator* std::__2::__to_address[abi:nn190000]&lang;motor::AngleCalculator&rang;(motor::AngleCalculator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*)
</UL>

<P><STRONG><a name="[206]"></a>std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__216__non_trivial_ifILb1ENS_9allocatorIN5motor15AngleCalculatorEEEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1e2]"></a>std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__216allocator_traitsINS_9allocatorIN5motor15AngleCalculatorEEEE10deallocateB8nn190000ERS4_PS3_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int) &rArr; std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int) &rArr; void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()
</UL>

<P><STRONG><a name="[1e4]"></a>void std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::destroy[abi:nn190000]&lang;motor::AngleCalculator, void&rang;(std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__216allocator_traitsINS_9allocatorIN5motor15AngleCalculatorEEEE7destroyB8nn190000IS3_vEEvRS4_PT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = void std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::destroy[abi:nn190000]&lang;motor::AngleCalculator, void&rang;(std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::destroy[abi:nn190000](motor::AngleCalculator*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator&lang;motor::AngleCalculator&rang;::destroy[abi:nn190000](motor::AngleCalculator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*)
</UL>

<P><STRONG><a name="[1e6]"></a>std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__217__compressed_pairIPN5motor15AngleCalculatorENS_9allocatorIS2_EEE6secondB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]() &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]()
</UL>

<P><STRONG><a name="[1e8]"></a>std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, djimotor.o(.text._ZNSt3__217__compressed_pairIPN5motor15AngleCalculatorENS_9allocatorIS2_EEEC2B8nn190000IDnNS_18__default_init_tagEEEOT_OT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;std::nullptr_t, void&rang;(std::nullptr_t&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1dd]"></a>std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__217__compressed_pairIPN9CanDriver6CanHalENS_14default_deleteIS2_EEE5firstB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]() &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*)
</UL>

<P><STRONG><a name="[1de]"></a>std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::second[abi:nn190000]()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__217__compressed_pairIPN9CanDriver6CanHalENS_14default_deleteIS2_EEE6secondB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::second[abi:nn190000]() &rArr; std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::reset[abi:nn190000](CanDriver::CanHal*)
</UL>

<P><STRONG><a name="[1e0]"></a>std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::__2::__value_init_tag, std::__2::__value_init_tag&rang;(std::__2::__value_init_tag&&, std::__2::__value_init_tag&&)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, can_driver.o(.text._ZNSt3__217__compressed_pairIPN9CanDriver6CanHalENS_14default_deleteIS2_EEEC2B8nn190000INS_16__value_init_tagES8_EEOT_OT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::__2::__value_init_tag, std::__2::__value_init_tag&rang;(std::__2::__value_init_tag&&, std::__2::__value_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(std::nullptr_t)
</UL>

<P><STRONG><a name="[1e1]"></a>std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, std::__2::__value_init_tag&rang;(CanDriver::CanHal*&, std::__2::__value_init_tag&&)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, can_driver.o(.text._ZNSt3__217__compressed_pairIPN9CanDriver6CanHalENS_14default_deleteIS2_EEEC2B8nn190000IRS3_NS_16__value_init_tagEEEOT_OT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, std::__2::__value_init_tag&rang;(CanDriver::CanHal*&, std::__2::__value_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, void&rang;(CanDriver::CanHal*&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, void&rang;(CanDriver::CanHal*&)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::unique_ptr&lang;CanDriver::CanHal, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::unique_ptr__sub_object[abi:nn190000]&lang;true, void&rang;(CanDriver::CanHal*)
</UL>

<P><STRONG><a name="[1f0]"></a>std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__219__libcpp_deallocateB8nn190000EPvjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int) &rArr; void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int)
</UL>

<P><STRONG><a name="[1ec]"></a>std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__get[abi:nn190000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__222__compressed_pair_elemINS_14default_deleteIN9CanDriver6CanHalEEELi1ELb1EE5__getB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::second[abi:nn190000]()
</UL>

<P><STRONG><a name="[1ee]"></a>std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_driver.o(.text._ZNSt3__222__compressed_pair_elemINS_14default_deleteIN9CanDriver6CanHalEEELi1ELb1EEC2B8nn190000ENS_16__value_init_tagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__compressed_pair_elem&lang;std::__2::default_delete&lang;CanDriver::CanHal&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::__2::__value_init_tag, std::__2::__value_init_tag&rang;(std::__2::__value_init_tag&&, std::__2::__value_init_tag&&)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, std::__2::__value_init_tag&rang;(CanDriver::CanHal*&, std::__2::__value_init_tag&&)
</UL>

<P><STRONG><a name="[1e7]"></a>std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__222__compressed_pair_elemINS_9allocatorIN5motor15AngleCalculatorEEELi1ELb1EE5__getB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]()
</UL>

<P><STRONG><a name="[1ea]"></a>std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__222__compressed_pair_elemINS_9allocatorIN5motor15AngleCalculatorEEELi1ELb1EEC2B8nn190000ENS_18__default_init_tagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&)
</UL>

<P><STRONG><a name="[1e9]"></a>std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;std::nullptr_t, void&rang;(std::nullptr_t&&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, djimotor.o(.text._ZNSt3__222__compressed_pair_elemIPN5motor15AngleCalculatorELi0ELb0EEC2B8nn190000IDnvEEOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__compressed_pair_elem&lang;motor::AngleCalculator*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;std::nullptr_t, void&rang;(std::nullptr_t&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&)
</UL>

<P><STRONG><a name="[1eb]"></a>std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, djimotor.o(.text._ZNSt3__222__compressed_pair_elemIPN9CanDriver6CanHalELi0ELb0EE5__getB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__get[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::first[abi:nn190000]()
</UL>

<P><STRONG><a name="[1ed]"></a>std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can_driver.o(.text._ZNSt3__222__compressed_pair_elemIPN9CanDriver6CanHalELi0ELb0EEC2B8nn190000ENS_16__value_init_tagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__value_init_tag)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::__2::__value_init_tag, std::__2::__value_init_tag&rang;(std::__2::__value_init_tag&&, std::__2::__value_init_tag&&)
</UL>

<P><STRONG><a name="[1ef]"></a>std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, void&rang;(CanDriver::CanHal*&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, can_driver.o(.text._ZNSt3__222__compressed_pair_elemIPN9CanDriver6CanHalELi0ELb0EEC2B8nn190000IRS3_vEEOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::__compressed_pair_elem&lang;CanDriver::CanHal*, 0, false&rang;::__compressed_pair_elem__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, void&rang;(CanDriver::CanHal*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;CanDriver::CanHal*, std::__2::default_delete&lang;CanDriver::CanHal&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;CanDriver::CanHal*&, std::__2::__value_init_tag&rang;(CanDriver::CanHal*&, std::__2::__value_init_tag&&)
</UL>

<P><STRONG><a name="[1f3]"></a>std::__2::__libcpp_verbose_abort(char const*, ...)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, verbose_abort.cpp.o(.text._ZNSt3__222__libcpp_verbose_abortEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_alloc()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__throw_bad_function_call[abi:nn190000]()
</UL>

<P><STRONG><a name="[1f4]"></a>void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__224__libcpp_operator_deleteB8nn190000IJPvEEEvDpT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int)
</UL>

<P><STRONG><a name="[1d4]"></a>std::__2::__throw_bad_function_call[abi:nn190000]()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, djimotor.o(.text._ZNSt3__225__throw_bad_function_callB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = std::__2::__throw_bad_function_call[abi:nn190000]() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__call_empty[abi:nn190000](std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[1f1]"></a>void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__227__do_deallocate_handle_sizeB8nn190000IJEEEvPvjDpT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[1d8]"></a>void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__228__invoke_void_return_wrapperIvLb1EE6__callB8nn190000IJRPFvPKhtES4_tEEEvDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&) &rArr; decltype(std::declval&lang;void (*&)(unsigned char const*, unsigned short)&rang;()(std::declval&lang;unsigned char const*&rang;(), std::declval&lang;unsigned short&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(std::declval&lang;void (*&)(unsigned char const*, unsigned short)&rang;()(std::declval&lang;unsigned char const*&rang;(), std::declval&lang;unsigned short&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;::operator()[abi:nn190000](unsigned char const*&&, unsigned short&&)
</UL>

<P><STRONG><a name="[1d9]"></a>void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__228__invoke_void_return_wrapperIvLb1EE6__callB8nn190000IJRPFvRKN9CanDriver8CanFrameEES6_EEEvDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&) &rArr; decltype(std::declval&lang;void (*&)(CanDriver::CanFrame const&)&rang;()(std::declval&lang;CanDriver::CanFrame const&&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(std::declval&lang;void (*&)(CanDriver::CanFrame const&)&rang;()(std::declval&lang;CanDriver::CanFrame const&&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;::operator()[abi:nn190000](CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[1bf]"></a>std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&, std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, uart_driver.o(.text._ZNSt3__24swapB8nn190000INS_10__function16__policy_invokerIFvPKhtEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS8_EE5valueEvE4typeERS8_SB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&rang;(std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&, std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&)
</UL>

<P><STRONG><a name="[1cb]"></a>std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&, std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, djimotor.o(.text._ZNSt3__24swapB8nn190000INS_10__function16__policy_invokerIFvRKN9CanDriver8CanFrameEEEEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableISA_EE5valueEvE4typeERSA_SD_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&rang;(std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&, std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>

<P><STRONG><a name="[1c1]"></a>std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__24swapB8nn190000INS_10__function16__policy_storageEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>

<P><STRONG><a name="[1c0]"></a>std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy const*&rang;::value && is_move_assignable&lang;std::__2::__function::__policy const*&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy const*&rang;(std::__2::__function::__policy const*&, std::__2::__function::__policy const*&)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, djimotor.o(.text._ZNSt3__24swapB8nn190000IPKNS_10__function8__policyEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy const*&rang;::value && is_move_assignable&lang;std::__2::__function::__policy const*&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy const*&rang;(std::__2::__function::__policy const*&, std::__2::__function::__policy const*&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>

<P><STRONG><a name="[1fd]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::__destroy_vector__sub_object[abi:nn190000](std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE16__destroy_vectorC2B8nn190000ERS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::__destroy_vector__sub_object[abi:nn190000](std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::~vector__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1f7]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE16__destroy_vectorclB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]() &rArr; std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int) &rArr; std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int) &rArr; void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::capacity[abi:nn190000]() const
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]()
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__annotate_delete[abi:nn190000]() const
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__clear[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::~vector__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[1fb]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE22__base_destruct_at_endB8nn190000EPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]() &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::destroy[abi:nn190000]&lang;motor::AngleCalculator, void&rang;(std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::AngleCalculator* std::__2::__to_address[abi:nn190000]&lang;motor::AngleCalculator&rang;(motor::AngleCalculator*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__clear[abi:nn190000]()
</UL>

<P><STRONG><a name="[1fa]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE7__allocB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]() &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()
</UL>

<P><STRONG><a name="[1f8]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__clear[abi:nn190000]()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEE7__clearB8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__clear[abi:nn190000]() &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__alloc[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::second[abi:nn190000]() &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__get[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__base_destruct_at_end[abi:nn190000](motor::AngleCalculator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()
</UL>

<P><STRONG><a name="[1a1]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]()</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DJImotor__sub_object(unsigned int)
</UL>

<P><STRONG><a name="[1a2]"></a>std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::~vector__sub_object[abi:nn190000]()</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__26vectorIN5motor15AngleCalculatorENS_9allocatorIS2_EEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::~vector__sub_object[abi:nn190000]() &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]() &rArr; std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int) &rArr; std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int) &rArr; void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::operator()[abi:nn190000]()
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__destroy_vector::__destroy_vector__sub_object[abi:nn190000](std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::~DJImotor__sub_object()
</UL>

<P><STRONG><a name="[1f5]"></a>decltype(std::declval&lang;void (*&)(unsigned char const*, unsigned short)&rang;()(std::declval&lang;unsigned char const*&rang;(), std::declval&lang;unsigned short&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__28__invokeB8nn190000IRPFvPKhtEJS2_tEEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS6_DpOS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decltype(std::declval&lang;void (*&)(unsigned char const*, unsigned short)&rang;()(std::declval&lang;unsigned char const*&rang;(), std::declval&lang;unsigned short&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(unsigned char const*, unsigned short), unsigned char const*, unsigned short&rang;(void (*&)(unsigned char const*, unsigned short), unsigned char const*&&, unsigned short&&)
</UL>

<P><STRONG><a name="[1f6]"></a>decltype(std::declval&lang;void (*&)(CanDriver::CanFrame const&)&rang;()(std::declval&lang;CanDriver::CanFrame const&&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__28__invokeB8nn190000IRPFvRKN9CanDriver8CanFrameEEJS4_EEEDTclclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOS8_DpOS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decltype(std::declval&lang;void (*&)(CanDriver::CanFrame const&)&rang;()(std::declval&lang;CanDriver::CanFrame const&&rang;())) std::__2::__invoke[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__invoke_void_return_wrapper&lang;void, true&rang;::__call[abi:nn190000]&lang;void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&&rang;(void (*&)(CanDriver::CanFrame const&), CanDriver::CanFrame const&)
</UL>

<P><STRONG><a name="[1fe]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::swap(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__28functionIFvPKhtEE4swapERS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::swap(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>

<P><STRONG><a name="[198]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object[abi:nn190000]()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__28functionIFvPKhtEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode)
</UL>

<P><STRONG><a name="[1ff]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__28functionIFvPKhtEEC2ERKS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&) &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)
</UL>

<P><STRONG><a name="[17a]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object&lang;void (*)(unsigned char const*, unsigned short), void&rang;(void (*)(unsigned char const*, unsigned short))</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, uart_driver.o(.text._ZNSt3__28functionIFvPKhtEEC2IPS3_vEET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object&lang;void (*)(unsigned char const*, unsigned short), void&rang;(void (*)(unsigned char const*, unsigned short)) &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short)) &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(unsigned char const*, unsigned short), void (unsigned char const*, unsigned short)&rang;&rang;() &rArr; std::__2::__function::__policy_invoker&lang;void (unsigned char const*, unsigned short)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, unsigned char const*, unsigned short))
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(unsigned char const*, unsigned short), 0&rang;(void (*&&)(unsigned char const*, unsigned short))
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEventCallback
</UL>

<P><STRONG><a name="[17c]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_driver.o(.text._ZNSt3__28functionIFvPKhtEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object() &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEventCallback
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::~uartDriver__sub_object()
</UL>

<P><STRONG><a name="[196]"></a>std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, uart_driver.o(.text._ZNSt3__28functionIFvPKhtEEaSERKS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::operator=(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&) &rArr; std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::swap(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (unsigned char const*, unsigned short)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::swap(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;&)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::function__sub_object(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang; const&)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;::~function__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::setRxCallback(std::__2::function&lang;void (unsigned char const*, unsigned short)&rang;)
</UL>

<P><STRONG><a name="[202]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::swap(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__28functionIFvRKN9CanDriver8CanFrameEEE4swapERS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::swap(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>

<P><STRONG><a name="[1b3]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object[abi:nn190000]()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, can_driver.o(.text._ZNSt3__28functionIFvRKN9CanDriver8CanFrameEEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::CanHal__sub_object()
</UL>

<P><STRONG><a name="[203]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__28functionIFvRKN9CanDriver8CanFrameEEEC2ERKS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&) &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>

<P><STRONG><a name="[110]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object&lang;void (*)(CanDriver::CanFrame const&), void&rang;(void (*)(CanDriver::CanFrame const&))</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__28functionIFvRKN9CanDriver8CanFrameEEEC2IPS5_vEET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object&lang;void (*)(CanDriver::CanFrame const&), void&rang;(void (*)(CanDriver::CanFrame const&)) &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&)) &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__create[abi:nn190000]&lang;std::__2::__function::__default_alloc_func&lang;void (*)(CanDriver::CanFrame const&), void (CanDriver::CanFrame const&)&rang;&rang;() &rArr; std::__2::__function::__policy_invoker&lang;void (CanDriver::CanFrame const&)&rang;::__policy_invoker__sub_object[abi:nn190000](void (*)(std::__2::__function::__policy_storage const*, CanDriver::CanFrame const&))
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::__policy_func__sub_object[abi:nn190000]&lang;void (*)(CanDriver::CanFrame const&), 0&rang;(void (*&&)(CanDriver::CanFrame const&))
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[112]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__28functionIFvRKN9CanDriver8CanFrameEEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object() &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::~__policy_func__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::~CanHal__sub_object()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)
</UL>

<P><STRONG><a name="[1b0]"></a>std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, djimotor.o(.text._ZNSt3__28functionIFvRKN9CanDriver8CanFrameEEEaSERKS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::operator=(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&) &rArr; std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::swap(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;::swap[abi:nn190000](std::__2::__function::__policy_func&lang;void (CanDriver::CanFrame const&)&rang;&) &rArr; std::__2::enable_if&lang;is_move_constructible&lang;std::__2::__function::__policy_storage&rang;::value && is_move_assignable&lang;std::__2::__function::__policy_storage&rang;::value, void&rang;::type std::__2::swap[abi:nn190000]&lang;std::__2::__function::__policy_storage&rang;(std::__2::__function::__policy_storage&, std::__2::__function::__policy_storage&)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::swap(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;&)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::function__sub_object(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang; const&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;::~function__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanHal::SetRxCallback(std::__2::function&lang;void (CanDriver::CanFrame const&)&rang;)
</UL>

<P><STRONG><a name="[1e3]"></a>std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, djimotor.o(.text._ZNSt3__29allocatorIN5motor15AngleCalculatorEE10deallocateB8nn190000EPS2_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::allocator&lang;motor::AngleCalculator&rang;::deallocate[abi:nn190000](motor::AngleCalculator*, unsigned int) &rArr; std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int) &rArr; void std::__2::__do_deallocate_handle_size[abi:nn190000]&lang;&rang;(void*, unsigned int) &rArr; void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_deallocate[abi:nn190000](void*, unsigned int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::deallocate[abi:nn190000](std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*, unsigned int)
</UL>

<P><STRONG><a name="[1e5]"></a>std::__2::allocator&lang;motor::AngleCalculator&rang;::destroy[abi:nn190000](motor::AngleCalculator*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, djimotor.o(.text._ZNSt3__29allocatorIN5motor15AngleCalculatorEE7destroyB8nn190000EPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::allocator&lang;motor::AngleCalculator&rang;::destroy[abi:nn190000](motor::AngleCalculator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::allocator_traits&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::destroy[abi:nn190000]&lang;motor::AngleCalculator, void&rang;(std::__2::allocator&lang;motor::AngleCalculator&rang;&, motor::AngleCalculator*)
</UL>

<P><STRONG><a name="[1f2]"></a>std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, djimotor.o(.text._ZNSt3__29allocatorIN5motor15AngleCalculatorEEC2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag)
</UL>

<P><STRONG><a name="[192]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_aligned_impl(unsigned int, std::align_val_t)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_impl(unsigned int)
</UL>

<P><STRONG><a name="[207]"></a>std::__throw_bad_alloc()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, new_helpers.cpp.o(.text._ZSt17__throw_bad_allocv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__libcpp_verbose_abort(char const*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int, std::align_val_t)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[19b]"></a>operator delete[](void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdaPv))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::~uartDriver__sub_object()
</UL>

<P><STRONG><a name="[1a6]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::STM32CANHal::~STM32CANHal__deallocating()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__libcpp_operator_delete[abi:nn190000]&lang;void*&rang;(void*)
</UL>

<P><STRONG><a name="[7a]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_driver.o(.rodata._ZTVN9CanDriver6CanHalE)
</UL>
<P><STRONG><a name="[208]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[ba]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxEventCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[118]"></a>osDelay</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmsis_os.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Comm
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitor
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Monitor
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Ctrl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[20a]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>osThreadCreate</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, cmsis_os.o(.text.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[21f]"></a>pvPortMalloc</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[21d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[113]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[116]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[211]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[224]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, freertos.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[21e]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[21c]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[213]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[212]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[215]"></a>vPortEnterCritical</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[217]"></a>vPortExitCritical</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[21a]"></a>vPortFree</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[226]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[20b]"></a>vTaskDelay</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[20c]"></a>vTaskStartScheduler</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[220]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[178]"></a>vTaskSwitchContext</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[225]"></a>xPortStartScheduler</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[20f]"></a>xTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[20e]"></a>xTaskCreateStatic</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[17e]"></a>xTaskIncrementTick</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[223]"></a>xTaskResumeAll</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[eb]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[22b]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[22a]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[22c]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[22d]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ec]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ed]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[22e]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1a7]"></a>operator new(unsigned int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.cpp.o(__lcxx_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_alloc()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_impl(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CreateCANHal(unsigned int)
</UL>

<P><STRONG><a name="[199]"></a>operator new[](unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(__lcxx_override))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode)
</UL>

<P><STRONG><a name="[22f]"></a>operator new(unsigned int, std::align_val_t)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.cpp.o(__lcxx_override), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_alloc()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator_new_aligned_impl(unsigned int, std::align_val_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[230]"></a>operator new[](unsigned int, std::align_val_t)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(__lcxx_override), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[ef]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[de]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5d]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[5f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DataUpdate(unsigned char const*, float)
</UL>

<P><STRONG><a name="[233]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DataUpdate(unsigned char const*, float)
</UL>

<P><STRONG><a name="[236]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[235]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[237]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DataUpdate(unsigned char const*, float)
</UL>

<P><STRONG><a name="[238]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[239]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[a6]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[27b]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[27c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[234]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[88]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[8c]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[155]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[157]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[158]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[132]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[133]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[135]"></a>DMA_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[142]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[13f]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[140]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[141]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[13e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[16b]"></a>UART_SetConfig</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[165]"></a>UART_EndRxTransfer</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[62]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[63]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMATxHalfCplt &rArr; HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[64]"></a>UART_DMAError</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; HAL_UART_GetError
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[180]"></a>UART_EndTxTransfer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[66]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[67]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[164]"></a>UART_Receive_IT</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UartDriver::uartDriver::myRxCallback(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; HAL_UART_GetError
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[167]"></a>UART_Transmit_IT</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32f4xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[21b]"></a>prvInitialiseNewTask</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[214]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[216]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[219]"></a>prvDeleteTCB</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[229]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[210]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[6f]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[218]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[20d]"></a>makeFreeRtosPriority</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmsis_os.o(.text.makeFreeRtosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[221]"></a>prvHeapInit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[222]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6e]"></a>prvTaskExitError</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[227]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[228]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[189]"></a>__cxx_global_var_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, target.o(.text.__cxx_global_var_init))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_target.cpp
</UL>

<P><STRONG><a name="[7b]"></a>_GLOBAL__sub_I_target.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, target.o(.text._GLOBAL__sub_I_target.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GLOBAL__sub_I_target.cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.init_array)
</UL>
<P><STRONG><a name="[185]"></a>__cxx_global_var_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, djimotor.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __cxx_global_var_init &rArr; motor::DJImotor::DJImotor__sub_object(unsigned int) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DJImotor__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_djimotor.cpp
</UL>

<P><STRONG><a name="[186]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, djimotor.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __cxx_global_var_init.1 &rArr; motor::DJImotor::DJImotor__sub_object(unsigned int) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DJImotor__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_djimotor.cpp
</UL>

<P><STRONG><a name="[187]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, djimotor.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __cxx_global_var_init.2 &rArr; motor::DJImotor::DJImotor__sub_object(unsigned int) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DJImotor__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_djimotor.cpp
</UL>

<P><STRONG><a name="[188]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, djimotor.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = __cxx_global_var_init.3 &rArr; motor::DJImotor::DJImotor__sub_object(unsigned int) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor::DJImotor::DJImotor__sub_object(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_djimotor.cpp
</UL>

<P><STRONG><a name="[7c]"></a>_GLOBAL__sub_I_djimotor.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, djimotor.o(.text._GLOBAL__sub_I_djimotor.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _GLOBAL__sub_I_djimotor.cpp &rArr; __cxx_global_var_init.3 &rArr; motor::DJImotor::DJImotor__sub_object(unsigned int) &rArr; std::__2::vector&lang;motor::AngleCalculator, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::vector__sub_object[abi:nn190000]() &rArr; std::__2::__compressed_pair&lang;motor::AngleCalculator*, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__compressed_pair__sub_object[abi:nn190000]&lang;std::nullptr_t, std::__2::__default_init_tag&rang;(std::nullptr_t&&, std::__2::__default_init_tag&&) &rArr; std::__2::__compressed_pair_elem&lang;std::__2::allocator&lang;motor::AngleCalculator&rang;, 1, true&rang;::__compressed_pair_elem__sub_object[abi:nn190000](std::__2::__default_init_tag) &rArr; std::__2::allocator&lang;motor::AngleCalculator&rang;::allocator__sub_object[abi:nn190000]() &rArr; std::__2::__non_trivial_if&lang;true, std::__2::allocator&lang;motor::AngleCalculator&rang;&rang;::__non_trivial_if__sub_object[abi:nn190000]()
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> djimotor.o(.init_array)
</UL>
<P><STRONG><a name="[18a]"></a>__cxx_global_var_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart_driver.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init &rArr; UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_uart_driver.cpp
</UL>

<P><STRONG><a name="[18b]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart_driver.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.1 &rArr; UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_uart_driver.cpp
</UL>

<P><STRONG><a name="[15f]"></a>UartDriver_Find(__UART_HandleTypeDef*)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, uart_driver.o(.text._ZL15UartDriver_FindP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartDriver_Find(__UART_HandleTypeDef*) &rArr; UartDriver::uartDriver::getHandle() const
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDriver::uartDriver::getHandle() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[7d]"></a>_GLOBAL__sub_I_uart_driver.cpp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_driver.o(.text._GLOBAL__sub_I_uart_driver.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_uart_driver.cpp &rArr; __cxx_global_var_init.1 &rArr; UartDriver::uartDriver::uartDriver__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short, UartDriver::uartDriver::UartMode) &rArr; operator new[](unsigned int) &rArr; operator new(unsigned int) &rArr; std::__throw_bad_alloc() &rArr; std::__2::__libcpp_verbose_abort(char const*, ...) &rArr; vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_driver.o(.init_array)
</UL>
<P><STRONG><a name="[191]"></a>operator_new_impl(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._ZL17operator_new_implj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator_new_impl(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[193]"></a>operator_new_aligned_impl(unsigned int, std::align_val_t)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, new.cpp.o(.text._ZL25operator_new_aligned_impljSt11align_val_t), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int, std::align_val_t)
</UL>

<P><STRONG><a name="[e9]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[5e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
